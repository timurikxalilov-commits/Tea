from telegram import Update, ReplyKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
from flask import Flask
from threading import Thread

# üîß –í–ê–ñ–ù–û: –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
MASTER_CHAT_ID = 5225197085
TOKEN = "7436013012:AAHq7FIRs5kJhaRIPkwV0bTF83-WdMPe4LY"  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather

# ü§ñ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)
last_reviews = []

# –ó–∞–ø—É—Å–∫ Flask –¥–ª—è Render –∏–ª–∏ Replit
app = Flask(__name__)
@app.route('/')
def home():
    return "–ì–≤–æ–∑–¥–∏ –∏ –õ–∏—Å—Ç—å—è"
def run():
    app.run(host='0.0.0.0', port=8080)
def keep_alive():
    Thread(target=run).start()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è
NAME, DATE, PLACE, COMMENTS, REVIEW = range(5)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üßò –û –ø—Ä–∞–∫—Ç–∏–∫–µ", "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è(—Å 24.08.2025–≥."],
        ["üí¨ –û—Ç–∑—ã–≤—ã", "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"],
        ["üì≤ –°–≤—è–∑—å —Å –º–∞—Å—Ç–µ—Ä–æ–º"]
    ]
    await update.message.reply_text(
        "üõ†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ *¬´–ì–≤–æ–∑–¥–∏ –∏ –õ–∏—Å—Ç—å—è¬ª* üçÉ\n\n"
        "üî© –°—Ç–æ—è–Ω–∏–µ –Ω–∞ –≥–≤–æ–∑–¥—è—Ö\n"
        "üçµ –ß–∞–π–Ω—ã–µ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏\n"
        "üíÜ –ë–∞–Ω–∫–∏\n"
        "üèï –í—ã–µ–∑–¥–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ –ø—Ä–∏—Ä–æ–¥–µ\n\n"
        "üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode="Markdown"
    )

async def practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåø –≠—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫:\n\n"
        "üî© –°—Ç–æ—è–Ω–∏–µ –Ω–∞ –≥–≤–æ–∑–¥—è—Ö\n"
        "üçµ –ö–∏—Ç–∞–π—Å–∫–∏–π —á–∞–π (–ø—É—ç—Ä, —É–ª—É–Ω, –¥–∞ —Ö—É–Ω –ø–∞–æ)\n"
        "üí® –î—ã—Ö–∞–Ω–∏–µ, —Ç–∏—à–∏–Ω–∞\n"
        "üíÜ –ë–∞–Ω–∫–∏\n"
        "üöô –í—ã–µ–∑–¥–Ω—ã–µ —Å–µ—Å—Å–∏–∏\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üôå"
    )

# --- –ó–∞—è–≤–∫–∞
async def sign_up(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ—Å—Å–∏—é? (–¥–∞—Ç–∞/–≤—Ä–µ–º—è)")
    return DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['date'] = update.message.text
    await update.message.reply_text("–ì–¥–µ –ø—Ä–æ–≤–µ—Å—Ç–∏? (–¥–æ–º–∞, –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ –∏–ª–∏ —É –º–µ–Ω—è –≤ –≥–æ—Å—Ç—è—Ö?)")
    return PLACE

async def get_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['place'] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?")
    return COMMENTS

async def get_comments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['comments'] = update.message.text
    user = update.message.from_user

    text = (
        f"üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:*\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üìÖ –í—Ä–µ–º—è: {context.user_data['date']}\n"
        f"üìç –ú–µ—Å—Ç–æ: {context.user_data['place']}\n"
        f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {context.user_data['comments']}\n"
        f"Telegram: @{user.username or '–Ω–µ—Ç'}"
    )

    await context.bot.send_message(chat_id=MASTER_CHAT_ID, text=text, parse_mode="Markdown")
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –Ø —Å–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Å—å üôå")
    return ConversationHandler.END

# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞
async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíö –•–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?\n\n"
        "üì≤ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É: *+7 912 852‚Äë81‚Äë81*\n"
        "_–°–±–µ—Ä–±–∞–Ω–∫ / –¢-–ë–∞–Ω–∫_ –Ω—É –∏–ª–∏ –∑–∞ —á–∞–π–Ω–æ–π —Ü–µ—Ä–µ–º–æ–Ω–∏–µ–πüê≤",
        parse_mode="Markdown"
    )

# --- –°–≤—è–∑—å
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì≤ –°–≤—è–∑—å —Å –¢–∏–º—É—Ä–æ–º: @Timpimi")

# --- –û—Ç–∑—ã–≤—ã
async def reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –æ—Ç–∑—ã–≤–∞–º–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def review_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤: –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ üôè")
    return REVIEW

async def receive_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    caption = f"‚úçÔ∏è –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{user.username or '–∞–Ω–æ–Ω–∏–º'}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–±–µ
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        await context.bot.send_photo(MASTER_CHAT_ID, file_id, caption=caption)
        last_reviews.append(('photo', file_id, caption))
    elif update.message.video:
        file_id = update.message.video.file_id
        await context.bot.send_video(MASTER_CHAT_ID, file_id, caption=caption)
        last_reviews.append(('video', file_id, caption))
    elif update.message.text:
        await context.bot.send_message(MASTER_CHAT_ID, f"{caption}\n\n{update.message.text}")
        last_reviews.append(('text', update.message.text, caption))
    else:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è üò¢")
        return ConversationHandler.END

    # –•—Ä–∞–Ω–∏–º –º–∞–∫—Å–∏–º—É–º 3 –æ—Ç–∑—ã–≤–∞
    if len(last_reviews) > 3:
        last_reviews.pop(0)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üåü")
    return ConversationHandler.END

async def show_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not last_reviews:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return

    await update.message.reply_text("üóÇ –≠—Ç–æ –∫—Ä–∞–π–Ω–∏–µ 3 –æ—Ç–∑—ã–≤–∞:")

    for kind, content, caption in last_reviews:
        if kind == 'photo':
            await update.message.reply_photo(content, caption=caption)
        elif kind == 'video':
            await update.message.reply_video(content, caption=caption)
        elif kind == 'text':
            await update.message.reply_text(f"{caption}\n\n{content}")

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫/–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è üôÉ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    keep_alive()
    app = ApplicationBuilder().token(TOKEN).build()

    # –ó–∞—è–≤–∫–∞
    signup_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è") | filters.Regex("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"), sign_up)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            PLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_place)],
            COMMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_comments)],
        },
        fallbacks=[]
    )

    # –û—Ç–∑—ã–≤—ã
    review_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), review_entry)],
        states={
            REVIEW: [MessageHandler(filters.ALL, receive_review)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(signup_conv)
    app.add_handler(review_conv)

    app.add_handler(MessageHandler(filters.Regex("üßò –û –ø—Ä–∞–∫—Ç–∏–∫–µ"), practice))
    app.add_handler(MessageHandler(filters.Regex("ü§ù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"), support))
    app.add_handler(MessageHandler(filters.Regex("üì≤ –°–≤—è–∑—å —Å –º–∞—Å—Ç–µ—Ä–æ–º"), contact))
    app.add_handler(MessageHandler(filters.Regex("üí¨ –û—Ç–∑—ã–≤—ã"), reviews))
    app.add_handler(MessageHandler(filters.Regex("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"), show_reviews))
    app.add_handler(MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), back_to_menu))

    app.add_handler(MessageHandler(filters.COMMAND, unknown))
    app.add_handler(MessageHandler(filters.TEXT, unknown))

    app.run_polling()

if __name__ == "__main__":
    main()
